{"posts":[{"title":"Open Source - contribute too","description":"Open Source coding is awesome and you too should contribute","date":"2016-05-28T12:00:00.000Z","tags":"javascript, open source, react","slug":"open-source-contribution","url":"/open-source-contribution","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2016-05-28-open-source-contribution.md","markdown":"I started my developing adventures in javascript and front end development a little over two years ago, and before javascript I enjoyed scripting with python. While using both of these languages I've benefited tremendously from open source technologies, specifically [GDAL](https://pypi.python.org/pypi/GDAL/) with python and [react](http://facebook.github.io/react/) with [redux](http://redux.js.org/).\n\nOpen source projects have had and continue to have a dramatic and profound effected on my career and life. A great example is the community around [react](http://facebook.github.io/react/). It is so helpful, encouraging, and positive.\n\n## Contributing to open source\n\nMy teachers at [refactorU](http://www.refactoru.com/) were the first ones to mention contributing to open source. They said 'if you found a bug, fix it and make a pull request', so I did. My [first contribution](https://github.com/loganbestwick/geo-tools/commits?author=hartzis) to open source was simple, but it felt great knowing I gave back and possibly helped someone else.\n\n### React community\n\nAfter contributing to a few other small libraries and getting PR's merged in I was added as a member and maintainer on a simple yet powerful react component - [react-swipeable](https://github.com/dogfessional/react-swipeable/graphs/contributors). I truly felt honored and took the responsibility seriously and as I contributed to react-swipeable it helped build my confidence and I started to look for opportunities to contribute to bigger projects.\n\nI was able to [contribute](https://github.com/reactjs/redux/commits?author=hartzis) to [redux](http://redux.js.org/) early-ish in its evolution in an attempt to help with some examples. [Dan Abramov](https://twitter.com/dan_abramov) is truly a stupendously nice person and he was amazingly [responsive and helpful](https://github.com/reactjs/redux/pull/424)!\n\n## Open source sum up\n\nI can attest that open source contributing is fun, fulfilling, and actually not too hard to do. Many open source maintainers need almost any help they can get, and a great way to get started is just helping with documentation! I encourage all entry level devs to attempt to contribute back to their communities.\n\nMost of my posts are fairly small and with this post I just wanted to lightly touch on my personal experience's with open source. It has been an amazing and rewarding journey that I wish to continue even though I am slightly scared of open source fatigue.\n\nHere's to a bright, open, and knowledge filled sharing future!","outputFile":"/open-source-contribution/index.html","html":"<p>I started my developing adventures in javascript and front end development a little over two years ago, and before javascript I enjoyed scripting with python. While using both of these languages I&#39;ve benefited tremendously from open source technologies, specifically <a href=\"https://pypi.python.org/pypi/GDAL/\">GDAL</a> with python and <a href=\"http://facebook.github.io/react/\">react</a> with <a href=\"http://redux.js.org/\">redux</a>.</p><p>Open source projects have had and continue to have a dramatic and profound effected on my career and life. A great example is the community around <a href=\"http://facebook.github.io/react/\">react</a>. It is so helpful, encouraging, and positive.</p><a name=contributing-to-open-source class=anchor href=#contributing-to-open-source><h2><span class=header-link></span>Contributing to open source</h2></a><p>My teachers at <a href=\"http://www.refactoru.com/\">refactorU</a> were the first ones to mention contributing to open source. They said &#39;if you found a bug, fix it and make a pull request&#39;, so I did. My <a href=\"https://github.com/loganbestwick/geo-tools/commits?author=hartzis\">first contribution</a> to open source was simple, but it felt great knowing I gave back and possibly helped someone else.</p><a name=react-community class=anchor href=#react-community><h3><span class=header-link></span>React community</h3></a><p>After contributing to a few other small libraries and getting PR&#39;s merged in I was added as a member and maintainer on a simple yet powerful react component - <a href=https://github.com/dogfessional/react-swipeable/graphs/contributors>react-swipeable</a>. I truly felt honored and took the responsibility seriously and as I contributed to react-swipeable it helped build my confidence and I started to look for opportunities to contribute to bigger projects.</p><p>I was able to <a href=\"https://github.com/reactjs/redux/commits?author=hartzis\">contribute</a> to <a href=\"http://redux.js.org/\">redux</a> early-ish in its evolution in an attempt to help with some examples. <a href=https://twitter.com/dan_abramov>Dan Abramov</a> is truly a stupendously nice person and he was amazingly <a href=https://github.com/reactjs/redux/pull/424>responsive and helpful</a>!</p><a name=open-source-sum-up class=anchor href=#open-source-sum-up><h2><span class=header-link></span>Open source sum up</h2></a><p>I can attest that open source contributing is fun, fulfilling, and actually not too hard to do. Many open source maintainers need almost any help they can get, and a great way to get started is just helping with documentation! I encourage all entry level devs to attempt to contribute back to their communities.</p><p>Most of my posts are fairly small and with this post I just wanted to lightly touch on my personal experience&#39;s with open source. It has been an amazing and rewarding journey that I wish to continue even though I am slightly scared of open source fatigue.</p><p>Here&#39;s to a bright, open, and knowledge filled sharing future!</p>","preview":"<p>I started my developing adventures in javascript and front end development a little over two years ago, and before javascript I enjoyed scripting with python. While using both of these languages I&#39;ve benefited tremendously from open source technologies, specifically <a href=\"https://pypi.python.org/pypi/GDAL/\">GDAL</a> with python and <a href=\"http://facebook.github.io/react/\">react</a> with <a href=\"http://redux.js.org/\">redux</a>.</p>"},{"title":"React with Recompose with Redux","description":"Compose/Compute props for [Re]act with [Re]compose and [Re]dux","date":"2016-02-20T12:00:00.000Z","tags":"javascript, react, props, compose, recompose, redux","slug":"react-recompose-redux","url":"/react-recompose-redux","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2016-02-20-react-recompose-redux.md","markdown":"Over the past few months I've been using a library called [recompose](https://github.com/acdlite/recompose). It claims to be 'a react utility belt for function components and higher-order components', and it fulfills this claim exceedingly well!\n\nI've [previously](/functional-redux-ducks) talked about [stateless functional components](http://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components) and how they have helped keep components small and more reusable. Functional components really shine with the help of [recompose](https://github.com/acdlite/recompose)! I've been able to extract computed properties, display logic, and overall optimize my code and views!\n\n### Simple recompose example\n\nLet's say we have a `store` of scientists and we need to display each scientists information.\n\n<script src=\"https://gist.github.com/hartzis/696edd6cb1f1d08a9e1d.js\"></script>\n\nWe have a `<Scientist/>` stateless functional component that handles the displaying of the scientists information. This component shouldn't care about how or where it's scientists display data has come from.\n\n<script src=\"https://gist.github.com/hartzis/b6e9530434885dd8ec6e.js\"></script>\n\nLet's assume a [redux](https://github.com/reactjs/redux) store containing [immutablejs](https://github.com/facebook/immutable-js/) data. So with [react-redux](https://github.com/reactjs/react-redux) we can get each scientists data and pass it to the view.\n\n<script src=\"https://gist.github.com/hartzis/1e6de9c07c0ff7ae7636.js\"></script>\n\nThe problem here is that our view requires DOB pre-formated and a full url to work properly. We need to compute a few display properties before the data gets passed into the view.\n\nThis could be done either in the `mapStateToProps` function with connect, but that shouldn't be its concern. We could also just do that in the `View`, but the view should just be a [presentational component](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.hs3v6lpjm)('dumb' component).\n\nIntroducing [recompose](https://github.com/acdlite/recompose)! This library gives us HOC's like `withPropsOnChange` that only update computed properties when one of the props it is 'watching' changes. Here is an example implementing it for our scientists.\n\n<script src=\"https://gist.github.com/hartzis/4c6a834e60cb0099edff.js\"></script>\n\nThis example also uses `compose` from [recompose](https://github.com/acdlite/recompose) which 'composes multiple higher-order components into a single higher-order component.'\n\n> recompose is a react utility belt for function components and higher-order components\n\n[recompose](https://github.com/acdlite/recompose) has been an amazingly strong addition to projects both at work and at home. It has helped with testing, by pulling out computed property calculations into pure functions, and just moving logic out of the views to make them simpler.\n\nCheck it out and if you have questions just let me know! Have fun!","outputFile":"/react-recompose-redux/index.html","html":"<p>Over the past few months I&#39;ve been using a library called <a href=https://github.com/acdlite/recompose>recompose</a>. It claims to be &#39;a react utility belt for function components and higher-order components&#39;, and it fulfills this claim exceedingly well!</p><p>I&#39;ve <a href=/functional-redux-ducks>previously</a> talked about <a href=http://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components>stateless functional components</a> and how they have helped keep components small and more reusable. Functional components really shine with the help of <a href=https://github.com/acdlite/recompose>recompose</a>! I&#39;ve been able to extract computed properties, display logic, and overall optimize my code and views!</p><a name=simple-recompose-example class=anchor href=#simple-recompose-example><h3><span class=header-link></span>Simple recompose example</h3></a><p>Let&#39;s say we have a <code>store</code> of scientists and we need to display each scientists information.</p><script src=https://gist.github.com/hartzis/696edd6cb1f1d08a9e1d.js></script><p>We have a <code>&lt;Scientist/&gt;</code> stateless functional component that handles the displaying of the scientists information. This component shouldn&#39;t care about how or where it&#39;s scientists display data has come from.</p><script src=https://gist.github.com/hartzis/b6e9530434885dd8ec6e.js></script><p>Let&#39;s assume a <a href=https://github.com/reactjs/redux>redux</a> store containing <a href=\"https://github.com/facebook/immutable-js/\">immutablejs</a> data. So with <a href=https://github.com/reactjs/react-redux>react-redux</a> we can get each scientists data and pass it to the view.</p><script src=https://gist.github.com/hartzis/1e6de9c07c0ff7ae7636.js></script><p>The problem here is that our view requires DOB pre-formated and a full url to work properly. We need to compute a few display properties before the data gets passed into the view.</p><p>This could be done either in the <code>mapStateToProps</code> function with connect, but that shouldn&#39;t be its concern. We could also just do that in the <code>View</code>, but the view should just be a <a href=https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.hs3v6lpjm>presentational component</a>(&#39;dumb&#39; component).</p><p>Introducing <a href=https://github.com/acdlite/recompose>recompose</a>! This library gives us HOC&#39;s like <code>withPropsOnChange</code> that only update computed properties when one of the props it is &#39;watching&#39; changes. Here is an example implementing it for our scientists.</p><script src=https://gist.github.com/hartzis/4c6a834e60cb0099edff.js></script><p>This example also uses <code>compose</code> from <a href=https://github.com/acdlite/recompose>recompose</a> which &#39;composes multiple higher-order components into a single higher-order component.&#39;</p><blockquote><p>recompose is a react utility belt for function components and higher-order components</p></blockquote><p><a href=https://github.com/acdlite/recompose>recompose</a> has been an amazingly strong addition to projects both at work and at home. It has helped with testing, by pulling out computed property calculations into pure functions, and just moving logic out of the views to make them simpler.</p><p>Check it out and if you have questions just let me know! Have fun!</p>","preview":"<p>Over the past few months I&#39;ve been using a library called <a href=https://github.com/acdlite/recompose>recompose</a>. It claims to be &#39;a react utility belt for function components and higher-order components&#39;, and it fulfills this claim exceedingly well!</p><p>I&#39;ve <a href=/functional-redux-ducks>previously</a> talked about <a href=http://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components>stateless functional components</a> and how they have helped keep components small and more reusable. Functional components really shine with the help of <a href=https://github.com/acdlite/recompose>recompose</a>! I&#39;ve been able to extract computed properties, display logic, and overall optimize my code and views!</p><a name=simple-recompose-example class=anchor href=#simple-recompose-example><h3><span class=header-link></span>Simple recompose example</h3></a>"},{"title":"Simply test react components","description":"Test react components with shallow rendering","date":"2015-12-26T12:00:00.000Z","tags":"javascript, react, testing","slug":"react-testing","url":"/react-testing","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2015-12-26-react-testing.md","markdown":"With react v0.13 they introduced 'shallow rendering', all basic html inside a component is rendered and no sub components are rendered. We now have the power to run unit tests in node without the need for a 'DOM'.\n\n> [Shallow Rendering](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) takes a component and renders it 'one level deep' and will not render sub components. This allows unit tests to keep focus on their specific component.\n\nThis post walks through writing simple tests for an example component `<List/>` which contains `<Item/>` components.\n\nThese testing examples use the TAP library [tape](https://github.com/substack/tape) and [airbnb's](http://nerds.airbnb.com/) newly open sourced react component testing utilities [enzyme](https://github.com/airbnb/enzyme) for react components.\n\n### Example `<List/>` component:\n<script src=\"https://gist.github.com/hartzis/b1ed6d811e6948b293b9.js\"></script>\n\nWhen writing unit tests for `<List/>` the tests should focus on the output of `<List/>` and not what `<Item>` does with the item data.\n\n### Example tests for `<List/>`:\n<script src=\"https://gist.github.com/hartzis/d9c5f448eecdf3475d48.js\"></script>\n\nThese unit tests focus on `<List/>` and make assertions as to what it will render, and are not concerned with what `<Item/>` will render. `<Item/>` has its own specific unit tests.\n\n### Example test for `<Item/>`:\n<script src=\"https://gist.github.com/hartzis/e5f889cc4b0c75849ba8.js\"></script>\n\n### Sum\n\nThis post is intended to be an easily digestible and simple intro to testing react components. Unit tests for react components can be quick and simple while adding confidence to your code base.\n\nPlease check out the repo [simple-react-enzyme-examples](https://github.com/hartzis/simple-react-enzyme-examples) if you'd like to run/check out these examples!","outputFile":"/react-testing/index.html","html":"<p>With react v0.13 they introduced &#39;shallow rendering&#39;, all basic html inside a component is rendered and no sub components are rendered. We now have the power to run unit tests in node without the need for a &#39;DOM&#39;.</p><blockquote><p><a href=https://facebook.github.io/react/docs/test-utils.html#shallow-rendering>Shallow Rendering</a> takes a component and renders it &#39;one level deep&#39; and will not render sub components. This allows unit tests to keep focus on their specific component.</p></blockquote><p>This post walks through writing simple tests for an example component <code>&lt;List/&gt;</code> which contains <code>&lt;Item/&gt;</code> components.</p><p>These testing examples use the TAP library <a href=https://github.com/substack/tape>tape</a> and <a href=\"http://nerds.airbnb.com/\">airbnb&#39;s</a> newly open sourced react component testing utilities <a href=https://github.com/airbnb/enzyme>enzyme</a> for react components.</p><a name=example-component class=anchor href=#example-component><h3><span class=header-link></span>Example <code>&lt;List/&gt;</code> component:</h3></a><script src=https://gist.github.com/hartzis/b1ed6d811e6948b293b9.js></script><p>When writing unit tests for <code>&lt;List/&gt;</code> the tests should focus on the output of <code>&lt;List/&gt;</code> and not what <code>&lt;Item&gt;</code> does with the item data.</p><a name=example-tests-for- class=anchor href=#example-tests-for-><h3><span class=header-link></span>Example tests for <code>&lt;List/&gt;</code>:</h3></a><script src=https://gist.github.com/hartzis/d9c5f448eecdf3475d48.js></script><p>These unit tests focus on <code>&lt;List/&gt;</code> and make assertions as to what it will render, and are not concerned with what <code>&lt;Item/&gt;</code> will render. <code>&lt;Item/&gt;</code> has its own specific unit tests.</p><a name=example-test-for- class=anchor href=#example-test-for-><h3><span class=header-link></span>Example test for <code>&lt;Item/&gt;</code>:</h3></a><script src=https://gist.github.com/hartzis/e5f889cc4b0c75849ba8.js></script><a name=sum class=anchor href=#sum><h3><span class=header-link></span>Sum</h3></a><p>This post is intended to be an easily digestible and simple intro to testing react components. Unit tests for react components can be quick and simple while adding confidence to your code base.</p><p>Please check out the repo <a href=https://github.com/hartzis/simple-react-enzyme-examples>simple-react-enzyme-examples</a> if you&#39;d like to run/check out these examples!</p>","preview":"<p>With react v0.13 they introduced &#39;shallow rendering&#39;, all basic html inside a component is rendered and no sub components are rendered. We now have the power to run unit tests in node without the need for a &#39;DOM&#39;.</p><blockquote><p><a href=https://facebook.github.io/react/docs/test-utils.html#shallow-rendering>Shallow Rendering</a> takes a component and renders it &#39;one level deep&#39; and will not render sub components. This allows unit tests to keep focus on their specific component.</p></blockquote>"},{"title":"Functional Redux Ducks","description":"Functional programming fun with Redux","date":"2015-11-03T12:00:00.000Z","tags":"javascript, react, redux, functional","slug":"functional-redux-ducks","url":"/functional-redux-ducks","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2015-11-3-functional-redux-ducks.md","markdown":"Recently I've been grasping at and learning more and more about functional programming. React has helped me quite a bit in this venture, but more recently [Redux](https://github.com/rackt/redux) has come into my life and I've truly been enjoying developing with it.\n\n## My learning adventure with redux\n\nMy adventure with redux began July 30, 2015. It was warm sunny day in Denver, CO, and one of my coworkers mentioned he'd heard of this amazing state manager that we can use with react called [Redux](https://github.com/rackt/redux).\n\nI was instantly hooked since we had recently been internally working on a state manager that resembled a lot of what redux was going for.\n\n>Quickly I read everything about redux that I could find online, cloned the repo, poked at examples, even became a [contributor](https://github.com/rackt/redux/commit/9db0c57a83661a240effc3db7a32130b129f21ce).\n\nThe first day I started learning about redux I also created [shop ducks with redux](https://github.com/hartzis/react-with-redux-shop-ducks). This has since become my playground for trying new things related to react and redux, like [redux-form](https://github.com/erikras/redux-form).\n\n* Checkout the ['Shopping for ducks with redux' - live working version](http://www.hartzis.me/react-with-redux-shop-ducks/)\n\n## Stateless functional components\n\nWith the release of react v0.14, we got [stateless functional components](http://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components). These have personally helped me stay focused on making smaller more reusable components and smaller more concise pieces of code.\n\n### Example stateless functional components\n<script src=\"https://gist.github.com/hartzis/469416bd0ac506896e9c.js\"></script>\n\n## Summarization\n\nAs I continue my adventure in the functional land of javascript I'm having more fun and I personally feel I'm writing better more maintainable code. Cheers to the functional future!","outputFile":"/functional-redux-ducks/index.html","html":"<p>Recently I&#39;ve been grasping at and learning more and more about functional programming. React has helped me quite a bit in this venture, but more recently <a href=https://github.com/rackt/redux>Redux</a> has come into my life and I&#39;ve truly been enjoying developing with it.</p><a name=my-learning-adventure-with-redux class=anchor href=#my-learning-adventure-with-redux><h2><span class=header-link></span>My learning adventure with redux</h2></a><p>My adventure with redux began July 30, 2015. It was warm sunny day in Denver, CO, and one of my coworkers mentioned he&#39;d heard of this amazing state manager that we can use with react called <a href=https://github.com/rackt/redux>Redux</a>.</p><p>I was instantly hooked since we had recently been internally working on a state manager that resembled a lot of what redux was going for.</p><blockquote><p>Quickly I read everything about redux that I could find online, cloned the repo, poked at examples, even became a <a href=https://github.com/rackt/redux/commit/9db0c57a83661a240effc3db7a32130b129f21ce>contributor</a>.</p></blockquote><p>The first day I started learning about redux I also created <a href=https://github.com/hartzis/react-with-redux-shop-ducks>shop ducks with redux</a>. This has since become my playground for trying new things related to react and redux, like <a href=https://github.com/erikras/redux-form>redux-form</a>.</p><ul><li>Checkout the <a href=\"http://www.hartzis.me/react-with-redux-shop-ducks/\">&#39;Shopping for ducks with redux&#39; - live working version</a></li></ul><a name=stateless-functional-components class=anchor href=#stateless-functional-components><h2><span class=header-link></span>Stateless functional components</h2></a><p>With the release of react v0.14, we got <a href=http://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components>stateless functional components</a>. These have personally helped me stay focused on making smaller more reusable components and smaller more concise pieces of code.</p><a name=example-stateless-functional-components class=anchor href=#example-stateless-functional-components><h3><span class=header-link></span>Example stateless functional components</h3></a><script src=https://gist.github.com/hartzis/469416bd0ac506896e9c.js></script><a name=summarization class=anchor href=#summarization><h2><span class=header-link></span>Summarization</h2></a><p>As I continue my adventure in the functional land of javascript I&#39;m having more fun and I personally feel I&#39;m writing better more maintainable code. Cheers to the functional future!</p>","preview":"<p>Recently I&#39;ve been grasping at and learning more and more about functional programming. React has helped me quite a bit in this venture, but more recently <a href=https://github.com/rackt/redux>Redux</a> has come into my life and I&#39;ve truly been enjoying developing with it.</p><a name=my-learning-adventure-with-redux class=anchor href=#my-learning-adventure-with-redux><h2><span class=header-link></span>My learning adventure with redux</h2></a>"},{"title":"Fetch Post/Put to Express Awesomeness","description":"Use fetch api to post/put data to express","date":"2015-10-05T12:00:00.000Z","tags":"javascript, react, fetch, post, express","slug":"fetch-post-express","url":"/fetch-post-express","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2015-10-05-fetch-post-express.md","markdown":"I'm using the new [fetch api](https://developers.google.com/web/updates/2015/03/introduction-to-fetch?hl=en) in google chrome and sending put/post request to an express/node application. Short post to just put some more information out into the world because I had some trouble with this and so my future self remembers and maybe it will help others.\n\n### Client Side\n<script src=\"https://gist.github.com/hartzis/60d07472f5bf8a913475.js\"></script>\n\n### Node/Express Side\n<script src=\"https://gist.github.com/hartzis/8aefb1c9ab5bd7635a52.js\"></script>\n\nAgain please let me know if you have questions or need help, [@hartzis](www.twitter.com/hartzis).","outputFile":"/fetch-post-express/index.html","html":"<p>I&#39;m using the new <a href=\"https://developers.google.com/web/updates/2015/03/introduction-to-fetch?hl=en\">fetch api</a> in google chrome and sending put/post request to an express/node application. Short post to just put some more information out into the world because I had some trouble with this and so my future self remembers and maybe it will help others.</p><a name=client-side class=anchor href=#client-side><h3><span class=header-link></span>Client Side</h3></a><script src=https://gist.github.com/hartzis/60d07472f5bf8a913475.js></script><a name=nodeexpress-side class=anchor href=#nodeexpress-side><h3><span class=header-link></span>Node/Express Side</h3></a><script src=https://gist.github.com/hartzis/8aefb1c9ab5bd7635a52.js></script><p>Again please let me know if you have questions or need help, <a href=www.twitter.com/hartzis>@hartzis</a>.</p>","preview":"<p>I&#39;m using the new <a href=\"https://developers.google.com/web/updates/2015/03/introduction-to-fetch?hl=en\">fetch api</a> in google chrome and sending put/post request to an express/node application. Short post to just put some more information out into the world because I had some trouble with this and so my future self remembers and maybe it will help others.</p><a name=client-side class=anchor href=#client-side><h3><span class=header-link></span>Client Side</h3></a><script src=https://gist.github.com/hartzis/60d07472f5bf8a913475.js></script><a name=nodeexpress-side class=anchor href=#nodeexpress-side><h3><span class=header-link></span>Node/Express Side</h3></a><script src=https://gist.github.com/hartzis/8aefb1c9ab5bd7635a52.js></script>"},{"title":"Upload Image File Component Fun","description":"Upload images to express server with react","date":"2015-07-13T12:00:00.000Z","tags":"javascript, react, xhr, ajax, express","slug":"react-image-upload","scripts":["//assets.codepen.io/assets/embed/ei.js"],"url":"/react-image-upload","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2015-07-13-react-image-upload.md","markdown":"I'm currently building a couple little apps to digest, catalog, and display heel clicking's from my worldly adventures.  \n\n\nWhile building the image processing app I needed to upload the images to an express server. This proved to be a very awesome learning experience that I have felt like sharing in order to help others and probably myself again down the road.\n\n## The React File Upload Component\n\n<p data-height=\"436\" data-theme-id=\"9092\" data-slug-hash=\"VvNGZP\" data-default-tab=\"result\" data-user=\"hartzis\" class='codepen'>See the Pen <a href='http://codepen.io/hartzis/pen/VvNGZP/'>React Image Preview & Upload</a> by Brian Emil Hartz (<a href='http://codepen.io/hartzis'>@hartzis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n<script src=\"https://gist.github.com/hartzis/0b77920380736f98e4f9.js\"></script>\n\n>Component Includes Preview of Image\n\nWhen submitted it will trigger the callback that fires the below ajax call with the image file.\n\n## XHR/Ajax Image Upload\n\n<script src=\"https://gist.github.com/hartzis/093173bb0b82eaafa73b.js\"></script>\n\n## The Server Side Image Save and Copy\n\nAlong with express I needed to npm install ['multiparty'](https://www.npmjs.com/package/multiparty). This example uses multiparty to parse the form data and extract the image file information. Then 'fs' to copy the temporarily upload image to a more permanent location.\n\n<script src=\"https://gist.github.com/hartzis/fb43721affdf9acd8555.js\"></script>\n\nI am now working on reprocessing the images to standard sizes and thumbnails using ['lwip'](https://github.com/EyalAr/lwip).\n\n>Please hit me up if you have problems and questions, I'm more than willing to help anyone doing this too!","outputFile":"/react-image-upload/index.html","html":"<p>I&#39;m currently building a couple little apps to digest, catalog, and display heel clicking&#39;s from my worldly adventures.</p><p>While building the image processing app I needed to upload the images to an express server. This proved to be a very awesome learning experience that I have felt like sharing in order to help others and probably myself again down the road.</p><a name=the-react-file-upload-component class=anchor href=#the-react-file-upload-component><h2><span class=header-link></span>The React File Upload Component</h2></a><p data-height=436 data-theme-id=9092 data-slug-hash=VvNGZP data-default-tab=result data-user=hartzis class=codepen>See the Pen <a href=\"http://codepen.io/hartzis/pen/VvNGZP/\">React Image Preview &amp; Upload</a> by Brian Emil Hartz (<a href=http://codepen.io/hartzis>@hartzis</a>) on <a href=http://codepen.io>CodePen</a>.</p><script src=https://gist.github.com/hartzis/0b77920380736f98e4f9.js></script><blockquote><p>Component Includes Preview of Image</p></blockquote><p>When submitted it will trigger the callback that fires the below ajax call with the image file.</p><a name=xhrajax-image-upload class=anchor href=#xhrajax-image-upload><h2><span class=header-link></span>XHR/Ajax Image Upload</h2></a><script src=https://gist.github.com/hartzis/093173bb0b82eaafa73b.js></script><a name=the-server-side-image-save-and-copy class=anchor href=#the-server-side-image-save-and-copy><h2><span class=header-link></span>The Server Side Image Save and Copy</h2></a><p>Along with express I needed to npm install <a href=https://www.npmjs.com/package/multiparty>&#39;multiparty&#39;</a>. This example uses multiparty to parse the form data and extract the image file information. Then &#39;fs&#39; to copy the temporarily upload image to a more permanent location.</p><script src=https://gist.github.com/hartzis/fb43721affdf9acd8555.js></script><p>I am now working on reprocessing the images to standard sizes and thumbnails using <a href=https://github.com/EyalAr/lwip>&#39;lwip&#39;</a>.</p><blockquote><p>Please hit me up if you have problems and questions, I&#39;m more than willing to help anyone doing this too!</p></blockquote>","preview":"<p>I&#39;m currently building a couple little apps to digest, catalog, and display heel clicking&#39;s from my worldly adventures.</p><p>While building the image processing app I needed to upload the images to an express server. This proved to be a very awesome learning experience that I have felt like sharing in order to help others and probably myself again down the road.</p><a name=the-react-file-upload-component class=anchor href=#the-react-file-upload-component><h2><span class=header-link></span>The React File Upload Component</h2></a><p data-height=436 data-theme-id=9092 data-slug-hash=VvNGZP data-default-tab=result data-user=hartzis class=codepen>See the Pen <a href=\"http://codepen.io/hartzis/pen/VvNGZP/\">React Image Preview &amp; Upload</a> by Brian Emil Hartz (<a href=http://codepen.io/hartzis>@hartzis</a>) on <a href=http://codepen.io>CodePen</a>.</p><script src=https://gist.github.com/hartzis/0b77920380736f98e4f9.js></script><blockquote>"},{"title":"Immutable State and React","description":"Immutable.js keeping a wonderful state for React","date":"2015-06-05T12:00:00.000Z","tags":"javascript, react, immutable, state","slug":"react-and-immutable","scripts":["//assets.codepen.io/assets/embed/ei.js"],"url":"/react-and-immutable","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2015-06-05-react-and-immutable.md","markdown":"Over the past six months I've had the opportunity, nay, the privilege, nay, the honor to work with reactjs.  This library is growing in popularity at an astounding rate.  My current employer was both smart and lucky to have chosen this library as the ground work for its front end architecture and I consider myself blessed to be apart of its development process.\n\n## Love hate of state\n\nWhile learning, building, and refactoring react components I've come to both love and hate state. I learned fast that many stateful components was a bad idea; instead passing down props while having stateless components was a very good idea.\n\nHaving a \"global\" app state has worked wonderfully. This can also lead to interesting problems with mutability of your state as it gets passed down as props through components. You will learn fast as I did that mutable state is not a fun problem to solve.\n\n## Immutable.js win\n\nHere is where we introduce [Immutable.js](https://facebook.github.io/immutable-js/) in all its wonderful immutableness.  Storing an apps state as an immutable map has saved hours worth of debugging, helped data management and has guided better conceptual understanding of app data flow.\n\n### React app diagram\n\nHere is a diagram of a react app structure that I've used many times. Simple, clean, top down approach.\n\n![Top down React app](/assets/reactApp.png \"Top down React App\")\n\nStore app state in a top level \"view\" component that passes its state down as props to subcomponents that handle data display and interaction. The interaction(updating) happens by passing functions down as props. These functions get called by the sub components with updated data that gets merged into the state that in turn gets passed down again as props.\n\n> ES2015, React and Immutable.js - yup\n\nHere is a small codepen example using ES2015, React, and Immutable.js that uses babel.io precompiler.\n\n<p data-height=\"400\" data-theme-id=\"9092\" data-slug-hash=\"NqwjpN\" data-default-tab=\"result\" data-user=\"hartzis\" class='codepen'>See the Pen <a href='http://codepen.io/hartzis/pen/NqwjpN/'>React and Immutable, Top Down</a> by Brian Emil Hartz (<a href='http://codepen.io/hartzis'>@hartzis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>","outputFile":"/react-and-immutable/index.html","html":"<p>Over the past six months I&#39;ve had the opportunity, nay, the privilege, nay, the honor to work with reactjs. This library is growing in popularity at an astounding rate. My current employer was both smart and lucky to have chosen this library as the ground work for its front end architecture and I consider myself blessed to be apart of its development process.</p><a name=love-hate-of-state class=anchor href=#love-hate-of-state><h2><span class=header-link></span>Love hate of state</h2></a><p>While learning, building, and refactoring react components I&#39;ve come to both love and hate state. I learned fast that many stateful components was a bad idea; instead passing down props while having stateless components was a very good idea.</p><p>Having a &quot;global&quot; app state has worked wonderfully. This can also lead to interesting problems with mutability of your state as it gets passed down as props through components. You will learn fast as I did that mutable state is not a fun problem to solve.</p><a name=immutablejs-win class=anchor href=#immutablejs-win><h2><span class=header-link></span>Immutable.js win</h2></a><p>Here is where we introduce <a href=\"https://facebook.github.io/immutable-js/\">Immutable.js</a> in all its wonderful immutableness. Storing an apps state as an immutable map has saved hours worth of debugging, helped data management and has guided better conceptual understanding of app data flow.</p><a name=react-app-diagram class=anchor href=#react-app-diagram><h3><span class=header-link></span>React app diagram</h3></a><p>Here is a diagram of a react app structure that I&#39;ve used many times. Simple, clean, top down approach.</p><p><img src=/assets/reactApp.png alt=\"Top down React app\" title=\"Top down React App\"></p><p>Store app state in a top level &quot;view&quot; component that passes its state down as props to subcomponents that handle data display and interaction. The interaction(updating) happens by passing functions down as props. These functions get called by the sub components with updated data that gets merged into the state that in turn gets passed down again as props.</p><blockquote><p>ES2015, React and Immutable.js - yup</p></blockquote><p>Here is a small codepen example using ES2015, React, and Immutable.js that uses babel.io precompiler.</p><p data-height=400 data-theme-id=9092 data-slug-hash=NqwjpN data-default-tab=result data-user=hartzis class=codepen>See the Pen <a href=\"http://codepen.io/hartzis/pen/NqwjpN/\">React and Immutable, Top Down</a> by Brian Emil Hartz (<a href=http://codepen.io/hartzis>@hartzis</a>) on <a href=http://codepen.io>CodePen</a>.</p>","preview":"<p>Over the past six months I&#39;ve had the opportunity, nay, the privilege, nay, the honor to work with reactjs. This library is growing in popularity at an astounding rate. My current employer was both smart and lucky to have chosen this library as the ground work for its front end architecture and I consider myself blessed to be apart of its development process.</p><a name=love-hate-of-state class=anchor href=#love-hate-of-state><h2><span class=header-link></span>Love hate of state</h2></a>"},{"title":"Tasty Vanilla JS and React","description":"Enjoying more javascript fun with the help of React","date":"2015-03-01T12:00:00.000Z","tags":"javascript, react, jsx","slug":"vanilla-js-and-react","url":"/vanilla-js-and-react","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2015-03-01-vanilla-js-and-react.md","markdown":"I'm always trying to improve my base javascript understanding and programming abilities. React helps with this task by letting me focus more on the \"business logic\" and less on the DOM manipulation.\n\n## Write tasty javascript\n\n> React lets you focus more on pure javascript and not the DOM.\n\nBelow is a small cart example written with React. It was one of my first react app creations. It simply searches <del>instagram</del> flicker for a search query of images, and lets you add them to a \"cart\".\n\n[React-cart Example](http://www.hartzis.me/react-gram-cart)  \n\n[React-cart github](https://github.com/hartzis/react-gram-cart)\n\n- One way data flow\n  - Pass callbacks to subcomponents to trigger events\n- \"vanilla js\" jsonP service request for data\n\n### Example jsonP request from React-cart\n```\n\nAppService.getGramsByQuery = function(query, passedInCallback) {\n\n  var query = \"tags=\" + tags + \"&tagmode=\" + \"any\" + \"&format=\" + \"json\";\n\n  var jsonPcallback = function ( data ) {\n      // remove from global scope\n      delete window.jsonFlickrFeed;\n\n      return passedInCallback({gramItems: data.items});\n  };\n\n  // Vanilla\n  var jsonFlickrFeed = function ( data ) {\n    jsonPcallback( data );\n  }\n  // put on global scope temporaralllyyyy\n  window.jsonFlickrFeed = jsonFlickrFeed;\n  var scr = document.createElement('script');\n\n  scr.src = 'http://api.flickr.com/services/feeds/photos_public.gne?callback=jsonFlickrFeed&' + query;\n  document.body.appendChild(scr);\n\n}\n\n```\n\nI've been able to learn many fun and delicious javascript goodies over the past few months, and I attribute a lot that to React","outputFile":"/vanilla-js-and-react/index.html","html":"<p>I&#39;m always trying to improve my base javascript understanding and programming abilities. React helps with this task by letting me focus more on the &quot;business logic&quot; and less on the DOM manipulation.</p><a name=write-tasty-javascript class=anchor href=#write-tasty-javascript><h2><span class=header-link></span>Write tasty javascript</h2></a><blockquote><p>React lets you focus more on pure javascript and not the DOM.</p></blockquote><p>Below is a small cart example written with React. It was one of my first react app creations. It simply searches<del>instagram</del>flicker for a search query of images, and lets you add them to a &quot;cart&quot;.</p><p><a href=http://www.hartzis.me/react-gram-cart>React-cart Example</a></p><p><a href=https://github.com/hartzis/react-gram-cart>React-cart github</a></p><ul><li>One way data flow<ul><li>Pass callbacks to subcomponents to trigger events</li></ul></li><li>&quot;vanilla js&quot; jsonP service request for data</li></ul><a name=example-jsonp-request-from-react-cart class=anchor href=#example-jsonp-request-from-react-cart><h3><span class=header-link></span>Example jsonP request from React-cart</h3></a><pre><code>\nAppService.getGramsByQuery = function(query, passedInCallback) {\n\n  var query = &quot;tags=&quot; + tags + &quot;&amp;tagmode=&quot; + &quot;any&quot; + &quot;&amp;format=&quot; + &quot;json&quot;;\n\n  var jsonPcallback = function ( data ) {\n      // remove from global scope\n      delete window.jsonFlickrFeed;\n\n      return passedInCallback({gramItems: data.items});\n  };\n\n  // Vanilla\n  var jsonFlickrFeed = function ( data ) {\n    jsonPcallback( data );\n  }\n  // put on global scope temporaralllyyyy\n  window.jsonFlickrFeed = jsonFlickrFeed;\n  var scr = document.createElement(&#39;script&#39;);\n\n  scr.src = &#39;http://api.flickr.com/services/feeds/photos_public.gne?callback=jsonFlickrFeed&amp;&#39; + query;\n  document.body.appendChild(scr);\n\n}\n</code></pre><p>I&#39;ve been able to learn many fun and delicious javascript goodies over the past few months, and I attribute a lot that to React</p>","preview":"<p>I&#39;m always trying to improve my base javascript understanding and programming abilities. React helps with this task by letting me focus more on the &quot;business logic&quot; and less on the DOM manipulation.</p><a name=write-tasty-javascript class=anchor href=#write-tasty-javascript><h2><span class=header-link></span>Write tasty javascript</h2></a><blockquote>"},{"title":"Respond to the React","description":"Learning my third-ish javascript framework in under a year, me likee!","date":"2015-01-15T12:00:00.000Z","tags":"javascript, react, jsx, jest, socket, testing","slug":"respond-to-the-react","url":"/respond-to-the-react","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2015-01-15-respond-to-the-react.md","markdown":"This is my third javascript framework I have begun to learn in under a year since graduating from [RefatorU](www.refactoru.com). Started the roller coaster with Angular, then traversed Backbone w/JQuery, and now the V(iew) that is [Reactjs](https://facebook.github.io/react/)!\n\n> I say ish since React is mostly just the View of a framework, but dizzam it is powerful and fast!\n\n## The Code - React and jsx\n\nI have definitely grown to exuberantly embrace jsx file format and react component creation. I used separate template files for js and html files in backbone and angular with handlebars. These now seems odd to me.\n\n> Having everything inside the component jsx file; javascript, state, and \"html\", feels right at home now.\n\n### Small example component from a todo app\n\n```\nvar TodoApp = React.createClass({\n  getInitialState: function() {\n    return {items: [], text: ''};\n  },\n  onChange: function(e) {\n    this.setState({text: e.target.value});\n  },\n  handleSubmit: function(e) {\n    e.preventDefault();\n    var nextItems = this.state.items.concat([this.state.text]);\n    var nextText = '';\n    this.setState({items: nextItems, text: nextText});\n  },\n  render: function() {\n    return (\n      <div>\n        <h3>TODO</h3>\n        <TodoList items={this.state.items} />\n        <form className=\"todoForm\" onSubmit={this.handleSubmit}>\n          <input className=\"todoInput\" onChange={this.onChange} value={this.state.text} />\n          <button className=\"submitTodo\">{'Add #' + (this.state.items.length + 1)}</button>\n        </form>\n      </div>\n  );}\n});\n```\n\n- Small, contained piece of code that has everything right there\n- You get HTML and other custom components as tags(think directives/web components)\n- event handlers are right there, you know where to look\n- state of the element also clear\n\n## Testing - React and Jest\n\nReact offers many things, including the amazing ability to test the DOM not in the browser!  \n\n> React.addons.TestUtils + Jest are the awesomeness\n\nThe ability to test DOM interaction and state in node with js tests is just, yup. Seriously, I can test clicking things, inputing data, and then see how my app reacts to all of this interaction with js tests! Check out the __tests__ folder below and see how easy it is.\n\nExample todo react app I had fun with, that has jest tests [test-react-with-jest](https://github.com/hartzis/test-react-with-jest)\n\n## Fun stuff - React and socket.io\n\nI also decided to see how I could integrate updating a component with socket.io.  Turned the previous todo app basically into a chat application.\n\nIsomorphic todo app turned chat app [react-socket-todo](https://github.com/hartzis/react-socket-todo)\n\n> State tracked in app passed to components rendered into static html!\n\nThis app is also [isomorphically](http://blog.risingstack.com/from-angularjs-to-react-the-isomorphic-way/) loading the components. Tracking the state on the server side, and new people to the chat get the history as static html, and then the javascript kicks in and takes over.  Using the same JS on the front and the back is pretty cool.\n\n### Example rendering html server side with React\n\n```\n// Render React to a string, passing in current todos\nvar markup = React.renderToString(\n  TodoApp({\n    todos: todos\n  })\n);\n```\n\nYou then inject the generated markup where it needs to go in your template being sent from the server and boom!\n\n## Conclusion\n\nCurrently having a superbly fun time using React, jsx, and jest. Continuing to look forward to a bright future of \"web components\"!","outputFile":"/respond-to-the-react/index.html","html":"<p>This is my third javascript framework I have begun to learn in under a year since graduating from <a href=www.refactoru.com>RefatorU</a>. Started the roller coaster with Angular, then traversed Backbone w/JQuery, and now the V(iew) that is <a href=\"https://facebook.github.io/react/\">Reactjs</a>!</p><blockquote><p>I say ish since React is mostly just the View of a framework, but dizzam it is powerful and fast!</p></blockquote><a name=the-code---react-and-jsx class=anchor href=#the-code---react-and-jsx><h2><span class=header-link></span>The Code - React and jsx</h2></a><p>I have definitely grown to exuberantly embrace jsx file format and react component creation. I used separate template files for js and html files in backbone and angular with handlebars. These now seems odd to me.</p><blockquote><p>Having everything inside the component jsx file; javascript, state, and &quot;html&quot;, feels right at home now.</p></blockquote><a name=small-example-component-from-a-todo-app class=anchor href=#small-example-component-from-a-todo-app><h3><span class=header-link></span>Small example component from a todo app</h3></a><pre><code>var TodoApp = React.createClass({\n  getInitialState: function() {\n    return {items: [], text: &#39;&#39;};\n  },\n  onChange: function(e) {\n    this.setState({text: e.target.value});\n  },\n  handleSubmit: function(e) {\n    e.preventDefault();\n    var nextItems = this.state.items.concat([this.state.text]);\n    var nextText = &#39;&#39;;\n    this.setState({items: nextItems, text: nextText});\n  },\n  render: function() {\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;TODO&lt;/h3&gt;\n        &lt;TodoList items={this.state.items} /&gt;\n        &lt;form className=&quot;todoForm&quot; onSubmit={this.handleSubmit}&gt;\n          &lt;input className=&quot;todoInput&quot; onChange={this.onChange} value={this.state.text} /&gt;\n          &lt;button className=&quot;submitTodo&quot;&gt;{&#39;Add #&#39; + (this.state.items.length + 1)}&lt;/button&gt;\n        &lt;/form&gt;\n      &lt;/div&gt;\n  );}\n});\n</code></pre><ul><li>Small, contained piece of code that has everything right there</li><li>You get HTML and other custom components as tags(think directives/web components)</li><li>event handlers are right there, you know where to look</li><li>state of the element also clear</li></ul><a name=testing---react-and-jest class=anchor href=#testing---react-and-jest><h2><span class=header-link></span>Testing - React and Jest</h2></a><p>React offers many things, including the amazing ability to test the DOM not in the browser!</p><blockquote><p>React.addons.TestUtils + Jest are the awesomeness</p></blockquote><p>The ability to test DOM interaction and state in node with js tests is just, yup. Seriously, I can test clicking things, inputing data, and then see how my app reacts to all of this interaction with js tests! Check out the <strong>tests</strong> folder below and see how easy it is.</p><p>Example todo react app I had fun with, that has jest tests <a href=https://github.com/hartzis/test-react-with-jest>test-react-with-jest</a></p><a name=fun-stuff---react-and-socketio class=anchor href=#fun-stuff---react-and-socketio><h2><span class=header-link></span>Fun stuff - React and socket.io</h2></a><p>I also decided to see how I could integrate updating a component with socket.io. Turned the previous todo app basically into a chat application.</p><p>Isomorphic todo app turned chat app <a href=https://github.com/hartzis/react-socket-todo>react-socket-todo</a></p><blockquote><p>State tracked in app passed to components rendered into static html!</p></blockquote><p>This app is also <a href=\"http://blog.risingstack.com/from-angularjs-to-react-the-isomorphic-way/\">isomorphically</a> loading the components. Tracking the state on the server side, and new people to the chat get the history as static html, and then the javascript kicks in and takes over. Using the same JS on the front and the back is pretty cool.</p><a name=example-rendering-html-server-side-with-react class=anchor href=#example-rendering-html-server-side-with-react><h3><span class=header-link></span>Example rendering html server side with React</h3></a><pre><code>// Render React to a string, passing in current todos\nvar markup = React.renderToString(\n  TodoApp({\n    todos: todos\n  })\n);\n</code></pre><p>You then inject the generated markup where it needs to go in your template being sent from the server and boom!</p><a name=conclusion class=anchor href=#conclusion><h2><span class=header-link></span>Conclusion</h2></a><p>Currently having a superbly fun time using React, jsx, and jest. Continuing to look forward to a bright future of &quot;web components&quot;!</p>","preview":"<p>This is my third javascript framework I have begun to learn in under a year since graduating from <a href=www.refactoru.com>RefatorU</a>. Started the roller coaster with Angular, then traversed Backbone w/JQuery, and now the V(iew) that is <a href=\"https://facebook.github.io/react/\">Reactjs</a>!</p><blockquote>"},{"title":"Angular Login Directive","description":"Self contained, simple, straightforward, easy angular login directive","date":"2014-11-02T12:00:00.000Z","tags":"javascript, angular, login, directive","slug":"angular-login-directive","scripts":["//codepen.io/assets/embed/ei.js"],"url":"/angular-login-directive","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2014-11-02-angular-login-directive.md","markdown":"This directive was created to simply handle an initial login screen. It allows us to download angular js from a cdn, to have it available before the client reaches the app.\n\n> User now has angular from a cdn so app initial load is faster, theoretically...\n\n## Angular Directive Power\n\nUsing an angular directive for login helps with validating the users ability to consume the actual angular application.  I'd like to eventually have some sort of check that if it didn't load, kindly let the user know that they need to use an updated browser.\n\n### Codepen\n\nI've been enjoying the usefulness of codepen, and now have begun to realize its amazing power with the ability to actually use angular efficiently and smoothly with it.\n\n### Angular Login Directive Codepen Example\n\n<p data-height=\"428\" data-theme-id=\"9092\" data-slug-hash=\"LEPXam\" data-default-tab=\"result\" data-user=\"hartzis\" class='codepen'>See the Pen <a href='http://codepen.io/hartzis/pen/LEPXam/'>Angular Login Form Directive</a> by Brian Emil Hartz (<a href='http://codepen.io/hartzis'>@hartzis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n\n\n## Angular Login Directive Gist\n<script src=\"https://gist.github.com/hartzis/d97942f48c0da504c982.js\"></script>","outputFile":"/angular-login-directive/index.html","html":"<p>This directive was created to simply handle an initial login screen. It allows us to download angular js from a cdn, to have it available before the client reaches the app.</p><blockquote><p>User now has angular from a cdn so app initial load is faster, theoretically...</p></blockquote><a name=angular-directive-power class=anchor href=#angular-directive-power><h2><span class=header-link></span>Angular Directive Power</h2></a><p>Using an angular directive for login helps with validating the users ability to consume the actual angular application. I&#39;d like to eventually have some sort of check that if it didn&#39;t load, kindly let the user know that they need to use an updated browser.</p><a name=codepen class=anchor href=#codepen><h3><span class=header-link></span>Codepen</h3></a><p>I&#39;ve been enjoying the usefulness of codepen, and now have begun to realize its amazing power with the ability to actually use angular efficiently and smoothly with it.</p><a name=angular-login-directive-codepen-example class=anchor href=#angular-login-directive-codepen-example><h3><span class=header-link></span>Angular Login Directive Codepen Example</h3></a><p data-height=428 data-theme-id=9092 data-slug-hash=LEPXam data-default-tab=result data-user=hartzis class=codepen>See the Pen <a href=\"http://codepen.io/hartzis/pen/LEPXam/\">Angular Login Form Directive</a> by Brian Emil Hartz (<a href=http://codepen.io/hartzis>@hartzis</a>) on <a href=http://codepen.io>CodePen</a>.</p><a name=angular-login-directive-gist class=anchor href=#angular-login-directive-gist><h2><span class=header-link></span>Angular Login Directive Gist</h2></a><script src=https://gist.github.com/hartzis/d97942f48c0da504c982.js></script>","preview":"<p>This directive was created to simply handle an initial login screen. It allows us to download angular js from a cdn, to have it available before the client reaches the app.</p><blockquote><p>User now has angular from a cdn so app initial load is faster, theoretically...</p></blockquote><a name=angular-directive-power class=anchor href=#angular-directive-power><h2><span class=header-link></span>Angular Directive Power</h2></a>"},{"title":"Dynamic Password Validation","description":"Nifty jquery password validation modified from stack exchange logic","date":"2014-10-02T12:00:00.000Z","tags":"javascript, jquery, forms","slug":"jquery-password-validation","scripts":["//codepen.io/assets/embed/ei.js"],"url":"/jquery-password-validation","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2014-10-02-jquery-password-validation.md","markdown":"Password validation based on specific security parameters was the task at hand. I wanted instant validation as the user typed their password in. These were the specifications that the user needed to meet.\n\n### Password Requirements\n* 6 characters in length\n* one uppercase\n* one lowercase\n* one digit\n* one special character\n\n## Example validations\n\nAs I browsed the internet using Chrome developer tools I came across a simple, yet cool implimentation.\n\n* [Stack Exchange](https://stackexchange.com/users/login#create-account)'s new user creation\n\nI quickly copied stack exchanges solution javascript into a [gist](https://gist.github.com/hartzis/6ae1980d3e90faf2c969) and went at creating a codepen from it!\n\n### Codepen\n\nEnter the amazing code playground that is Codepen.io! I built the following codepen that anyone is free to copy/use/fork.\n\n### Password Validation Codepen Example\n\n<p data-height=\"233\" data-theme-id=\"9092\" data-slug-hash=\"bgJqK\" data-default-tab=\"result\" data-user=\"hartzis\" class='codepen'>See the Pen <a href='http://codepen.io/hartzis/pen/bgJqK/'>Dynamic Password Validation, work in progress...</a> by Brian Emil Hartz (<a href='http://codepen.io/hartzis'>@hartzis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\nps... Please introduce code completion on codepen.io\n\n## Password validation Gist\n<script src=\"https://gist.github.com/hartzis/6ae1980d3e90faf2c969.js\"></script>","outputFile":"/jquery-password-validation/index.html","html":"<p>Password validation based on specific security parameters was the task at hand. I wanted instant validation as the user typed their password in. These were the specifications that the user needed to meet.</p><a name=password-requirements class=anchor href=#password-requirements><h3><span class=header-link></span>Password Requirements</h3></a><ul><li>6 characters in length</li><li>one uppercase</li><li>one lowercase</li><li>one digit</li><li>one special character</li></ul><a name=example-validations class=anchor href=#example-validations><h2><span class=header-link></span>Example validations</h2></a><p>As I browsed the internet using Chrome developer tools I came across a simple, yet cool implimentation.</p><ul><li><a href=https://stackexchange.com/users/login#create-account>Stack Exchange</a>&#39;s new user creation</li></ul><p>I quickly copied stack exchanges solution javascript into a <a href=https://gist.github.com/hartzis/6ae1980d3e90faf2c969>gist</a> and went at creating a codepen from it!</p><a name=codepen class=anchor href=#codepen><h3><span class=header-link></span>Codepen</h3></a><p>Enter the amazing code playground that is Codepen.io! I built the following codepen that anyone is free to copy/use/fork.</p><a name=password-validation-codepen-example class=anchor href=#password-validation-codepen-example><h3><span class=header-link></span>Password Validation Codepen Example</h3></a><p data-height=233 data-theme-id=9092 data-slug-hash=bgJqK data-default-tab=result data-user=hartzis class=codepen>See the Pen <a href=\"http://codepen.io/hartzis/pen/bgJqK/\">Dynamic Password Validation, work in progress...</a> by Brian Emil Hartz (<a href=http://codepen.io/hartzis>@hartzis</a>) on <a href=http://codepen.io>CodePen</a>.</p><p>ps... Please introduce code completion on codepen.io</p><a name=password-validation-gist class=anchor href=#password-validation-gist><h2><span class=header-link></span>Password validation Gist</h2></a><script src=https://gist.github.com/hartzis/6ae1980d3e90faf2c969.js></script>","preview":"<p>Password validation based on specific security parameters was the task at hand. I wanted instant validation as the user typed their password in. These were the specifications that the user needed to meet.</p><a name=password-requirements class=anchor href=#password-requirements><h3><span class=header-link></span>Password Requirements</h3></a><ul><li>6 characters in length</li><li>one uppercase</li><li>one lowercase</li><li>one digit</li><li>one special character</li></ul><a name=example-validations class=anchor href=#example-validations><h2><span class=header-link></span>Example validations</h2></a>"},{"title":"Charting magic in angular","description":"Fun with charting in angular.","date":"2014-08-01T12:00:00.000Z","tags":"angular, javascript, directive, highcharts","slug":"highcharts-ng","url":"/highcharts-ng","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2014-08-01-highcharts-ng.md","markdown":"I have data, data that needs proper representation in the online web-o-sphere! This data wants to show the world how gorgeous it is! The data is not simple, it is complex and wants to explore how dynamic it can be.\n<br><br>Enter [highcharts](www.highcharts.com) the super duper phenomenally extra awesome graphing/charting all in one library.  \n\n## highcharts and angular\n\n[Highcharts](http://www.highcharts.com) is quite dynamic by default.  With this amazing charting library you can easily manipulate how the data is visually displayed.  \n\n>Found a great directive that encapsulated the usability with watches that update data after ajax requests.\n\n## Highcharts-ng\n\n[Highcharts-ng](https://github.com/pablojim/highcharts-ng) is a directive itself, it has a lot of boilerplate code that has to be attached to the controller's scope. And that is where another wrapper directive comes in handy that isolates the scope.\n\n![highcharts-ng from client project](/assets/highcharts1.png \"highcharts-ng from client project\")\n\n### Directive Template\n\nWe create another directive to wrap the highcharts-ng directive, to contain all the required configuration stuff.\n\n```\n<div class=\"row\">\n  <div class=\"col-xs-12 text-center\"></div>\n  <highchart config=\"chartConfig\"></highchart>\n</div>\n```\n\n>This directive contains the boilerplate javascript for highcharts-ng. This helps with the modularity, keeping everything associated with the directive together.\n\n```\n.directive('dataChart', [\n    function() {\n      return {\n        restrict: 'E',\n        scope: {\n          chartData: '=chartData'\n        },\n        templateUrl: '/directiveTemplates/dataChart',\n        replace: 'true',\n        controller: ['$scope',\n          function($scope) {\n\n            // setup chart params\n            $scope.chartConfig = {\n              options: {\n                chart: {\n                  backgroundColor: '#f9f9f9',\n                  type: 'area'\n                }\n              },\n              xAxis: {\n                categories: [],\n                tickmarkPlacement: 'on'\n              },\n              yAxis: {\n                title: {\n                  text: ''\n                }\n              },\n              series: [],\n              title: {\n                text: 'Title'\n              },\n              loading: true\n            };\n}\n```\n\n### Final thoughts\nI am using this directive exclusively for a current project, and am loving it. Though this is a short post, it is here to remind others and myself in the future to keep things contained and reusable.","outputFile":"/highcharts-ng/index.html","html":"<p>I have data, data that needs proper representation in the online web-o-sphere! This data wants to show the world how gorgeous it is! The data is not simple, it is complex and wants to explore how dynamic it can be.<br><br>Enter <a href=www.highcharts.com>highcharts</a> the super duper phenomenally extra awesome graphing/charting all in one library.</p><a name=highcharts-and-angular class=anchor href=#highcharts-and-angular><h2><span class=header-link></span>highcharts and angular</h2></a><p><a href=http://www.highcharts.com>Highcharts</a> is quite dynamic by default. With this amazing charting library you can easily manipulate how the data is visually displayed.</p><blockquote><p>Found a great directive that encapsulated the usability with watches that update data after ajax requests.</p></blockquote><a name=highcharts-ng class=anchor href=#highcharts-ng><h2><span class=header-link></span>Highcharts-ng</h2></a><p><a href=https://github.com/pablojim/highcharts-ng>Highcharts-ng</a> is a directive itself, it has a lot of boilerplate code that has to be attached to the controller&#39;s scope. And that is where another wrapper directive comes in handy that isolates the scope.</p><p><img src=/assets/highcharts1.png alt=\"highcharts-ng from client project\" title=\"highcharts-ng from client project\"></p><a name=directive-template class=anchor href=#directive-template><h3><span class=header-link></span>Directive Template</h3></a><p>We create another directive to wrap the highcharts-ng directive, to contain all the required configuration stuff.</p><pre><code>&lt;div class=&quot;row&quot;&gt;\n  &lt;div class=&quot;col-xs-12 text-center&quot;&gt;&lt;/div&gt;\n  &lt;highchart config=&quot;chartConfig&quot;&gt;&lt;/highchart&gt;\n&lt;/div&gt;\n</code></pre><blockquote><p>This directive contains the boilerplate javascript for highcharts-ng. This helps with the modularity, keeping everything associated with the directive together.</p></blockquote><pre><code>.directive(&#39;dataChart&#39;, [\n    function() {\n      return {\n        restrict: &#39;E&#39;,\n        scope: {\n          chartData: &#39;=chartData&#39;\n        },\n        templateUrl: &#39;/directiveTemplates/dataChart&#39;,\n        replace: &#39;true&#39;,\n        controller: [&#39;$scope&#39;,\n          function($scope) {\n\n            // setup chart params\n            $scope.chartConfig = {\n              options: {\n                chart: {\n                  backgroundColor: &#39;#f9f9f9&#39;,\n                  type: &#39;area&#39;\n                }\n              },\n              xAxis: {\n                categories: [],\n                tickmarkPlacement: &#39;on&#39;\n              },\n              yAxis: {\n                title: {\n                  text: &#39;&#39;\n                }\n              },\n              series: [],\n              title: {\n                text: &#39;Title&#39;\n              },\n              loading: true\n            };\n}\n</code></pre><a name=final-thoughts class=anchor href=#final-thoughts><h3><span class=header-link></span>Final thoughts</h3></a><p>I am using this directive exclusively for a current project, and am loving it. Though this is a short post, it is here to remind others and myself in the future to keep things contained and reusable.</p>","preview":"<p>I have data, data that needs proper representation in the online web-o-sphere! This data wants to show the world how gorgeous it is! The data is not simple, it is complex and wants to explore how dynamic it can be.<br><br>Enter <a href=www.highcharts.com>highcharts</a> the super duper phenomenally extra awesome graphing/charting all in one library.</p><a name=highcharts-and-angular class=anchor href=#highcharts-and-angular><h2><span class=header-link></span>highcharts and angular</h2></a>"},{"title":"Tablefy with ngTable","description":"Fun with ngTable directive.","date":"2014-07-14T12:00:00.000Z","tags":"angular, javascript, directive","slug":"ngtable","url":"/ngtable","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2014-07-14-ngtable.md","markdown":"I'm working on creating an interactive table that displays thousands of records that needs to be capable of both filtering by specific parameters and sortable. So here is a short and sweet chat about my adventure.\n\n>AngularJS offers great modularity with directives, so I knew there had to be a powerful and customizable table directive out there somewhere.  \n\nI found three amazing angular 'table' directives:\n\n- [ng-grid](http://angular-ui.github.io/ng-grid/)\n- [trNgGrid](http://moonstorm.github.io/trNgGrid/beta/index.html)\n- [ngTable](http://bazalt-cms.com/ng-table/)\n\n## ng-grid, now ui-grid\n[ng-grid](http://angular-ui.github.io/ng-grid/)\n![ng-grid](/assets/ss-nggrid.png \"ng-grid\")\n\n\n>Note ng-grid is now ui-grid and I would definitely reevalute using it!*\n\nI first looked at ng-grid since it was backed by the angular-ui team. It seems to have slowed down its development sadly and I also needed strong pagination and ‘items per page’. View example [plnkr](http://plnkr.co/edit/T6qaQX?p=info).  \n\nAnother thing that was interesting about ng-grid is that it doesn't use the base html tags for a table. No table, tbody, tr, or td's; everything is constructed with div's. Which means css frameworks like bootstrap won't play nice right out of the box.\n\n## trNgGrid\n[trNgGrid](http://moonstorm.github.io/trNgGrid/beta/index.html)\n![trNgGrid](/assets/ss-trnggrid.png \"trNgGrid\")\n\ntrNgGrid didn’t quite have the backing and support I was looking for either, and its current release didn’t have the strong stable features of its next release. The creator also forgot to include a way to quickly demo and explore the directive using plnkr/jsfiddle or any of those.  \n\n```\n<table tr-ng-grid=\"\" items=\"myItems\"></table>\n```\n\nIt is amazing self contained meaning you only need the html line above to create a dynamic table.\n\n## ngTable\n[ngTable](http://bazalt-cms.com/ng-table/)\n![ngTable](/assets/ss-ngtable.png \"ngTable\")\n\nI decided on [ngTable](http://bazalt-cms.com/ng-table/). This directive has great pagination, customization, and strong filter/sorting capabilities. I've also been able to find a lot of answers and support for questions online. View example [plnkr](http://plnkr.co/edit/ISa4xg?p=preview).\n\n### Final thoughts\nAs always I am having a great time with how declarative AngularJS is and the fun that is directives. I highly recommend ngTable for all your data table needs. Let me know if you have any questions or need help with ngTable.","outputFile":"/ngtable/index.html","html":"<p>I&#39;m working on creating an interactive table that displays thousands of records that needs to be capable of both filtering by specific parameters and sortable. So here is a short and sweet chat about my adventure.</p><blockquote><p>AngularJS offers great modularity with directives, so I knew there had to be a powerful and customizable table directive out there somewhere.</p></blockquote><p>I found three amazing angular &#39;table&#39; directives:</p><ul><li><a href=\"http://angular-ui.github.io/ng-grid/\">ng-grid</a></li><li><a href=http://moonstorm.github.io/trNgGrid/beta/index.html>trNgGrid</a></li><li><a href=\"http://bazalt-cms.com/ng-table/\">ngTable</a></li></ul><a name=ng-grid-now-ui-grid class=anchor href=#ng-grid-now-ui-grid><h2><span class=header-link></span>ng-grid, now ui-grid</h2></a><p><a href=\"http://angular-ui.github.io/ng-grid/\">ng-grid</a> <img src=/assets/ss-nggrid.png alt=ng-grid title=ng-grid></p><blockquote><p>Note ng-grid is now ui-grid and I would definitely reevalute using it!*</p></blockquote><p>I first looked at ng-grid since it was backed by the angular-ui team. It seems to have slowed down its development sadly and I also needed strong pagination and ‘items per page’. View example <a href=\"http://plnkr.co/edit/T6qaQX?p=info\">plnkr</a>.</p><p>Another thing that was interesting about ng-grid is that it doesn&#39;t use the base html tags for a table. No table, tbody, tr, or td&#39;s; everything is constructed with div&#39;s. Which means css frameworks like bootstrap won&#39;t play nice right out of the box.</p><a name=trnggrid class=anchor href=#trnggrid><h2><span class=header-link></span>trNgGrid</h2></a><p><a href=http://moonstorm.github.io/trNgGrid/beta/index.html>trNgGrid</a> <img src=/assets/ss-trnggrid.png alt=trNgGrid title=trNgGrid></p><p>trNgGrid didn’t quite have the backing and support I was looking for either, and its current release didn’t have the strong stable features of its next release. The creator also forgot to include a way to quickly demo and explore the directive using plnkr/jsfiddle or any of those.</p><pre><code>&lt;table tr-ng-grid=&quot;&quot; items=&quot;myItems&quot;&gt;&lt;/table&gt;\n</code></pre><p>It is amazing self contained meaning you only need the html line above to create a dynamic table.</p><a name=ngtable class=anchor href=#ngtable><h2><span class=header-link></span>ngTable</h2></a><p><a href=\"http://bazalt-cms.com/ng-table/\">ngTable</a> <img src=/assets/ss-ngtable.png alt=ngTable title=ngTable></p><p>I decided on <a href=\"http://bazalt-cms.com/ng-table/\">ngTable</a>. This directive has great pagination, customization, and strong filter/sorting capabilities. I&#39;ve also been able to find a lot of answers and support for questions online. View example <a href=\"http://plnkr.co/edit/ISa4xg?p=preview\">plnkr</a>.</p><a name=final-thoughts class=anchor href=#final-thoughts><h3><span class=header-link></span>Final thoughts</h3></a><p>As always I am having a great time with how declarative AngularJS is and the fun that is directives. I highly recommend ngTable for all your data table needs. Let me know if you have any questions or need help with ngTable.</p>","preview":"<p>I&#39;m working on creating an interactive table that displays thousands of records that needs to be capable of both filtering by specific parameters and sortable. So here is a short and sweet chat about my adventure.</p><blockquote><p>AngularJS offers great modularity with directives, so I knew there had to be a powerful and customizable table directive out there somewhere.</p></blockquote>"},{"title":"Node Cylons","description":"Team frackin cylons takes on node copter competition","date":"2014-06-29T12:00:00.000Z","tags":"node, javascript, uav","slug":"node-copter","url":"/node-copter","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2014-06-29-node-copter.md","markdown":"Last weekend RefactorU's team 'frackin toasters' programmed an [ar-drone](http://ardrone2.parrot.com/) using [Node.js](http://nodejs.org/).\n---\n\nThis was definitely one of the most rewarding programming days I have ever had.  Not only did we program a drone, we used input from an [ultrasonic sensor](https://www.sparkfun.com/products/8501) to know where the drone was in relation to us!\n\n>The drone would reverse when we walked towards it, approach us when we walked backwards, and stay put when we stood still.\n\n### Our team took home the 'Top node-copter engineering team' and the award for using external hardware!\n\n<div>\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Team frackin-toasters! <a href=\"https://twitter.com/RefactorU\">@RefactorU</a> <a href=\"https://twitter.com/NodeCopter\">@nodecopter</a> <a href=\"https://twitter.com/hashtag/sparkfunavc?src=hash\">#sparkfunavc</a> <a href=\"https://twitter.com/hashtag/refactoru?src=hash\">#refactoru</a> <a href=\"http://t.co/O1XMqbMofl\">pic.twitter.com/O1XMqbMofl</a></p>&mdash; Brian Emil Hartz (@hartzis) <a href=\"https://twitter.com/hartzis/statuses/480443276630061057\">June 21, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div>\n\nI wanted to thank [nodecopter](http://nodecopter.com/), [sparkfun](http://www.sparkfun.com), and [Refactoru](http://www.refactoru.com) for putting this event on!","outputFile":"/node-copter/index.html","html":"<a name=last-weekend-refactoru39s-team-39frackin-toasters39-programmed-an- class=anchor href=#last-weekend-refactoru39s-team-39frackin-toasters39-programmed-an-><h2><span class=header-link></span>Last weekend RefactorU&#39;s team &#39;frackin toasters&#39; programmed an <a href=\"http://ardrone2.parrot.com/\">ar-drone</a> using <a href=\"http://nodejs.org/\">Node.js</a>.</h2></a><p>This was definitely one of the most rewarding programming days I have ever had. Not only did we program a drone, we used input from an <a href=https://www.sparkfun.com/products/8501>ultrasonic sensor</a> to know where the drone was in relation to us!</p><blockquote><p>The drone would reverse when we walked towards it, approach us when we walked backwards, and stay put when we stood still.</p></blockquote><a name=our-team-took-home-the-39top-node-copter-engineering-team39-and-the-award-for-using-external-hardware class=anchor href=#our-team-took-home-the-39top-node-copter-engineering-team39-and-the-award-for-using-external-hardware><h3><span class=header-link></span>Our team took home the &#39;Top node-copter engineering team&#39; and the award for using external hardware!</h3></a><div><blockquote class=twitter-tweet lang=en><p>Team frackin-toasters! <a href=https://twitter.com/RefactorU>@RefactorU</a> <a href=https://twitter.com/NodeCopter>@nodecopter</a> <a href=\"https://twitter.com/hashtag/sparkfunavc?src=hash\">#sparkfunavc</a> <a href=\"https://twitter.com/hashtag/refactoru?src=hash\">#refactoru</a> <a href=http://t.co/O1XMqbMofl>pic.twitter.com/O1XMqbMofl</a></p>&mdash; Brian Emil Hartz (@hartzis) <a href=https://twitter.com/hartzis/statuses/480443276630061057>June 21, 2014</a></blockquote><script async src=//platform.twitter.com/widgets.js charset=utf-8></script></div><p>I wanted to thank <a href=\"http://nodecopter.com/\">nodecopter</a>, <a href=http://www.sparkfun.com>sparkfun</a>, and <a href=http://www.refactoru.com>Refactoru</a> for putting this event on!</p>","preview":"<a name=last-weekend-refactoru39s-team-39frackin-toasters39-programmed-an- class=anchor href=#last-weekend-refactoru39s-team-39frackin-toasters39-programmed-an-><h2><span class=header-link></span>Last weekend RefactorU&#39;s team &#39;frackin toasters&#39; programmed an <a href=\"http://ardrone2.parrot.com/\">ar-drone</a> using <a href=\"http://nodejs.org/\">Node.js</a>.</h2></a>"},{"title":"Angular and ngEnter","description":"About a great angular directive","date":"2014-06-25T12:00:00.000Z","tags":"angular, javascript, directive","slug":"angular-ngenter","url":"/angular-ngenter","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2014-06-25-angular-ngenter.md","markdown":"I'd like to give a shout out to [Eric Saupe](http://ericsaupe.com/) for creating an amazing directive.  While I was building [MapTweet.Info](https://github.com/hartzis/MapTweet.Info) I needed something that wasn't JQuery to track when an input was 'submitted' with enter.\n\n### I found this directive from Eric below.\n\n[Link](http://ericsaupe.com/angularjs-detect-enter-key-ngenter/) to full post on his site.\n\n## GitHub Gist\n\nGist Created below for personal reference in the future.\n\n<script src=\"https://gist.github.com/hartzis/c6014b6289fab5e32d06.js\"></script>\n\n### Thank you agin Eric and Cheers!","outputFile":"/angular-ngenter/index.html","html":"<p>I&#39;d like to give a shout out to <a href=\"http://ericsaupe.com/\">Eric Saupe</a> for creating an amazing directive. While I was building <a href=https://github.com/hartzis/MapTweet.Info>MapTweet.Info</a> I needed something that wasn&#39;t JQuery to track when an input was &#39;submitted&#39; with enter.</p><a name=i-found-this-directive-from-eric-below class=anchor href=#i-found-this-directive-from-eric-below><h3><span class=header-link></span>I found this directive from Eric below.</h3></a><p><a href=\"http://ericsaupe.com/angularjs-detect-enter-key-ngenter/\">Link</a> to full post on his site.</p><a name=github-gist class=anchor href=#github-gist><h2><span class=header-link></span>GitHub Gist</h2></a><p>Gist Created below for personal reference in the future.</p><script src=https://gist.github.com/hartzis/c6014b6289fab5e32d06.js></script><a name=thank-you-agin-eric-and-cheers class=anchor href=#thank-you-agin-eric-and-cheers><h3><span class=header-link></span>Thank you agin Eric and Cheers!</h3></a>","preview":"<p>I&#39;d like to give a shout out to <a href=\"http://ericsaupe.com/\">Eric Saupe</a> for creating an amazing directive. While I was building <a href=https://github.com/hartzis/MapTweet.Info>MapTweet.Info</a> I needed something that wasn&#39;t JQuery to track when an input was &#39;submitted&#39; with enter.</p><a name=i-found-this-directive-from-eric-below class=anchor href=#i-found-this-directive-from-eric-below><h3><span class=header-link></span>I found this directive from Eric below.</h3></a>"},{"title":"RefactorU and Projects","description":"Time at refactoru and projects built.","date":"2014-06-12T12:00:00.000Z","tags":"javascript, angular, node, d3, refactoru","slug":"refactoru-and-projects","url":"/refactoru-and-projects","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2014-06-12-refactoru-and-projects.md","markdown":"I just finished 10 weeks of intense learning, practice, and implementation.  [RefactorU](http://www.refactoru.com) was an awesome experience. It is truly amazing how one can learn so much and be so powerful in such a short time.\n\n## Some Technologies taught and learned:\n* [NodeJS](http://www.nodejs.com) - Javascript back-end\n* [Twitter Bootstrap](http://twitter.github.com/bootstrap/) - Front-end framework including responsive web design\n* [jQuery](http://jquery.com)\n* [express](http://expressjs.com)\n\n### Technologies self taught and explored outside of class:\n* [AngularJS](http://www.angularjs.com) - Amazing single page front end framework and so much more\n* [D3js](http://www.d3js.com) - Data Driven Documents, an amazing library to visualize any data, including map data\n\n## Projects:\n\n### MapTweet.Info\n* [MapTweet.Info](https://github.com/hartzis/MapTweet.Info) - My capstone/final project for class(and continuing to improve)\n  * Uses [AngularJS](http://www.angularjs.com), [Twitter API](http://dev.twitter.com), and [Google Maps API](https://developers.google.com/maps/) to list a few.\n\n![MapTweet.Info](/assets/maptweet-info-ss.png \"MapTweet.Info\")\n![MapTweet.Info](/assets/maptweet-search-ss.png \"MapTweet.Info\")\n\n### CMPD2012\n* [Colorado's 2012 Medicare Payment Data Visualized](http://cmpd2012.herokuapp.com) - Collaboration with fellow students [@Lamperta](http://www.twitter.com/Lamperta) and [@keunicek](http://www.twitter.com/keunicek)\n  * Uses [D3js](http://www.d3js.com) for both the pie chart and the map.\n  * [jQuery](http://jquery.com) for animations and DOM manipulation and traversal\n\n![cmpd2012.herokuapp.com](/assets/cmpd2012-map-ss.jpg \"cmpd2012.herokuapp.com\")\n![cmpd2012.herokuapp.com](/assets/cmpd2012-info-ss.jpg \"cmpd2012.herokuapp.com\")\n\n\nCheers","outputFile":"/refactoru-and-projects/index.html","html":"<p>I just finished 10 weeks of intense learning, practice, and implementation. <a href=http://www.refactoru.com>RefactorU</a> was an awesome experience. It is truly amazing how one can learn so much and be so powerful in such a short time.</p><a name=some-technologies-taught-and-learned class=anchor href=#some-technologies-taught-and-learned><h2><span class=header-link></span>Some Technologies taught and learned:</h2></a><ul><li><a href=http://www.nodejs.com>NodeJS</a> - Javascript back-end</li><li><a href=\"http://twitter.github.com/bootstrap/\">Twitter Bootstrap</a> - Front-end framework including responsive web design</li><li><a href=http://jquery.com>jQuery</a></li><li><a href=http://expressjs.com>express</a></li></ul><a name=technologies-self-taught-and-explored-outside-of-class class=anchor href=#technologies-self-taught-and-explored-outside-of-class><h3><span class=header-link></span>Technologies self taught and explored outside of class:</h3></a><ul><li><a href=http://www.angularjs.com>AngularJS</a> - Amazing single page front end framework and so much more</li><li><a href=http://www.d3js.com>D3js</a> - Data Driven Documents, an amazing library to visualize any data, including map data</li></ul><a name=projects class=anchor href=#projects><h2><span class=header-link></span>Projects:</h2></a><a name=maptweetinfo class=anchor href=#maptweetinfo><h3><span class=header-link></span>MapTweet.Info</h3></a><ul><li><a href=https://github.com/hartzis/MapTweet.Info>MapTweet.Info</a> - My capstone/final project for class(and continuing to improve)<ul><li>Uses <a href=http://www.angularjs.com>AngularJS</a>, <a href=http://dev.twitter.com>Twitter API</a>, and <a href=\"https://developers.google.com/maps/\">Google Maps API</a> to list a few.</li></ul></li></ul><p><img src=/assets/maptweet-info-ss.png alt=MapTweet.Info title=MapTweet.Info> <img src=/assets/maptweet-search-ss.png alt=MapTweet.Info title=MapTweet.Info></p><a name=cmpd2012 class=anchor href=#cmpd2012><h3><span class=header-link></span>CMPD2012</h3></a><ul><li><a href=http://cmpd2012.herokuapp.com>Colorado&#39;s 2012 Medicare Payment Data Visualized</a> - Collaboration with fellow students <a href=http://www.twitter.com/Lamperta>@Lamperta</a> and <a href=http://www.twitter.com/keunicek>@keunicek</a><ul><li>Uses <a href=http://www.d3js.com>D3js</a> for both the pie chart and the map.</li><li><a href=http://jquery.com>jQuery</a> for animations and DOM manipulation and traversal</li></ul></li></ul><p><img src=/assets/cmpd2012-map-ss.jpg alt=cmpd2012.herokuapp.com title=cmpd2012.herokuapp.com> <img src=/assets/cmpd2012-info-ss.jpg alt=cmpd2012.herokuapp.com title=cmpd2012.herokuapp.com></p><p>Cheers</p>","preview":"<p>I just finished 10 weeks of intense learning, practice, and implementation. <a href=http://www.refactoru.com>RefactorU</a> was an awesome experience. It is truly amazing how one can learn so much and be so powerful in such a short time.</p><a name=some-technologies-taught-and-learned class=anchor href=#some-technologies-taught-and-learned><h2><span class=header-link></span>Some Technologies taught and learned:</h2></a><ul><li><a href=http://www.nodejs.com>NodeJS</a> - Javascript back-end</li><li><a href=\"http://twitter.github.com/bootstrap/\">Twitter Bootstrap</a> - Front-end framework including responsive web design</li><li><a href=http://jquery.com>jQuery</a></li><li><a href=http://expressjs.com>express</a></li></ul><a name=technologies-self-taught-and-explored-outside-of-class class=anchor href=#technologies-self-taught-and-explored-outside-of-class><h3><span class=header-link></span>Technologies self taught and explored outside of class:</h3></a><ul><li><a href=http://www.angularjs.com>AngularJS</a> - Amazing single page front end framework and so much more</li><li><a href=http://www.d3js.com>D3js</a> - Data Driven Documents, an amazing library to visualize any data, including map data</li></ul><a name=projects class=anchor href=#projects><h2><span class=header-link></span>Projects:</h2></a><a name=maptweetinfo class=anchor href=#maptweetinfo><h3><span class=header-link></span>MapTweet.Info</h3></a><ul><li><a href=https://github.com/hartzis/MapTweet.Info>MapTweet.Info</a> - My capstone/final project for class(and continuing to improve)<ul><li>Uses <a href=http://www.angularjs.com>AngularJS</a>, <a href=http://dev.twitter.com>Twitter API</a>, and <a href=\"https://developers.google.com/maps/\">Google Maps API</a> to list a few.</li></ul></li></ul>"},{"title":"Tributary.io and D3","description":"Write visualizations with D3js online!","date":"2014-05-28T12:00:00.000Z","tags":"d3, javascript, tributary","slug":"tributary-d3","url":"/tributary-d3","startingFilename":"/Users/hartzis/projects/hartzis.github.io/posts/2014-05-18-tributary-d3.md","markdown":"I'd like to share what maybe the greatest tool for working with D3js: [tributary.io](http://www.trubutary.io).\n\n> Tributary is an experimental environment for rapidly prototyping visualization code.\n\nThis web application lets you build any D3 visualization you can imagine right in your browser. No need to setup the D3 environment locally when you want to just test out an idea or quickly get a proof of concept going.\n\n## My Work With Tributary.io:\n\nI used [tributary.io](http://www.trubutary.io) extensively while collaboratively working on [CMPD2012](http://CMPD2012.herokuapp.com). Tributary.io is so easy to use, responsive and instantly refreshed and updated changes as you typed.\n\n> Tributary uses your github.com authentication to save your work to your [Gist](http://gist.github.com) as, what they call, an *inlet*.\n\n### Example Inlet for 'Hello World'\n\nYou can click the [link](http://tributary.io/inlet/093144225f67c410e515) in the gist below to open this example inlet then expand it and save it to your own gist!\n\n<script src=\"https://gist.github.com/hartzis/093144225f67c410e515.js\"></script>\n\n### Advanced Tributary Uses\n\nAlong with all the inherent Tributary libraries(d3, underscore, and more), it lets you import other javascript libraries. The example inlet below was used to build the map on [CMPD2012](http://CMPD2012.herokuapp.com).\n\n### CMPD2012 Map inlet Example Gist\n\n>**Example inlet loads these additional libraries:**\n\n* [topojson](https://github.com/mbostock/topojson) - extension to JSON that encodes topology\n* [polymaps](http://polymaps.org/) - library for making dynamic, interactive maps\n\n![CMPD2012 - tributary.io - Map inlet](/assets/cmpd2012-tributary-map.jpg \"CMPD2012 - tributary.io - Map inlet\")\n\n<script src=\"https://gist.github.com/hartzis/11292469.js\"></script>","outputFile":"/tributary-d3/index.html","html":"<p>I&#39;d like to share what maybe the greatest tool for working with D3js: <a href=http://www.trubutary.io>tributary.io</a>.</p><blockquote><p>Tributary is an experimental environment for rapidly prototyping visualization code.</p></blockquote><p>This web application lets you build any D3 visualization you can imagine right in your browser. No need to setup the D3 environment locally when you want to just test out an idea or quickly get a proof of concept going.</p><a name=my-work-with-tributaryio class=anchor href=#my-work-with-tributaryio><h2><span class=header-link></span>My Work With Tributary.io:</h2></a><p>I used <a href=http://www.trubutary.io>tributary.io</a> extensively while collaboratively working on <a href=http://CMPD2012.herokuapp.com>CMPD2012</a>. Tributary.io is so easy to use, responsive and instantly refreshed and updated changes as you typed.</p><blockquote><p>Tributary uses your github.com authentication to save your work to your <a href=http://gist.github.com>Gist</a> as, what they call, an <em>inlet</em>.</p></blockquote><a name=example-inlet-for-39hello-world39 class=anchor href=#example-inlet-for-39hello-world39><h3><span class=header-link></span>Example Inlet for &#39;Hello World&#39;</h3></a><p>You can click the <a href=http://tributary.io/inlet/093144225f67c410e515>link</a> in the gist below to open this example inlet then expand it and save it to your own gist!</p><script src=https://gist.github.com/hartzis/093144225f67c410e515.js></script><a name=advanced-tributary-uses class=anchor href=#advanced-tributary-uses><h3><span class=header-link></span>Advanced Tributary Uses</h3></a><p>Along with all the inherent Tributary libraries(d3, underscore, and more), it lets you import other javascript libraries. The example inlet below was used to build the map on <a href=http://CMPD2012.herokuapp.com>CMPD2012</a>.</p><a name=cmpd2012-map-inlet-example-gist class=anchor href=#cmpd2012-map-inlet-example-gist><h3><span class=header-link></span>CMPD2012 Map inlet Example Gist</h3></a><blockquote><p><strong>Example inlet loads these additional libraries:</strong></p></blockquote><ul><li><a href=https://github.com/mbostock/topojson>topojson</a> - extension to JSON that encodes topology</li><li><a href=\"http://polymaps.org/\">polymaps</a> - library for making dynamic, interactive maps</li></ul><p><img src=/assets/cmpd2012-tributary-map.jpg alt=\"CMPD2012 - tributary.io - Map inlet\" title=\"CMPD2012 - tributary.io - Map inlet\"></p><script src=https://gist.github.com/hartzis/11292469.js></script>","preview":"<p>I&#39;d like to share what maybe the greatest tool for working with D3js: <a href=http://www.trubutary.io>tributary.io</a>.</p><blockquote><p>Tributary is an experimental environment for rapidly prototyping visualization code.</p></blockquote><p>This web application lets you build any D3 visualization you can imagine right in your browser. No need to setup the D3 environment locally when you want to just test out an idea or quickly get a proof of concept going.</p><a name=my-work-with-tributaryio class=anchor href=#my-work-with-tributaryio><h2><span class=header-link></span>My Work With Tributary.io:</h2></a>"}]}
